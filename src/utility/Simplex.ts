import { BigDecimal } from "../math/BigDecimal.js";

class Gradient {
	constructor(dx: number, dy: number, dz?: number, dw?: number) {
		this.dx = dx;
		this.dy = dy;
		if (dz) {
			this.dz = dz;
			if (dw) {
				this.dw = dw;
			}
		}
	}

	dx: number;
	dy: number;
	dz?: number;
	dw?: number;
}

class LatticePoint {
	constructor(xsv: number, ysv: number);

	constructor(xrv: number, yrv: number, zrv: number, _: undefined, lattice: number);

	constructor(xsv: number, ysv: number, zsv: number, wsv: number);

	constructor(xsv: number, ysv: number, zsv?: number, wsv?: number, lattice?: number) {
		if (typeof zsv != "undefined") {
			if (typeof wsv != "undefined") {
				this.xsv = xsv;
				this.ysv = ysv;
				this.zsv = zsv;
				this.wsv = wsv;
				const ssv: number = (xsv + ysv + zsv + wsv) * -0.138196601125011;
				this.dx = -xsv - ssv;
				this.dy = -ysv - ssv;
				this.dz = -zsv - ssv;
				this.dw = -wsv - ssv;
			} else if (typeof lattice != "undefined") {
				this.dx = -xsv + lattice * 0.5;
				this.dy = -ysv + lattice * 0.5;
				this.dz = -zsv + lattice * 0.5;
				this.xsv = xsv + lattice * 0x400;
				this.ysv = ysv + lattice * 0x400;
				this.zsv = zsv + lattice * 0x400;
			} else {
				throw new Error("Cannot create a lattice point with a third dimension without either a fourth dimension or a lattice value.");
			}
		} else {
			this.xsv = xsv;
			this.ysv = ysv;
			const ssv: number = (xsv + ysv) * -0.211324865405187;
			this.dx = -xsv - ssv;
			this.dy = -ysv - ssv;
		}
	}

	xsv: number;
	ysv: number;
	zsv?: number;
	wsv?: number;
	dx: number;
	dy: number;
	dz?: number;
	dw?: number;
	nextOnSuccess?: LatticePoint;
	nextOnFailure?: LatticePoint;
}

/** OpenSimplex2S ("SuperSimplex") noise generator. */
export class Simplex {
	static #fastFloor(x: number): number {
		const xi: number = Math.floor(x);
		return x < xi ? xi - 1 : xi;
	}
	
	static readonly #PSIZE: number = 0x800;
	static readonly #PMASK: number = 0x7FF;
	static readonly #LOOKUP_2D: ReadonlyArray<LatticePoint> = ((): LatticePoint[] => {
		const output: LatticePoint[] = [];

		for (let i = 0; i < 8; i++) {
			let i1;
			let j1;
			let i2;
			let j2;
			if ((i & 1) == 0) {
				if ((i & 2) == 0) {
					i1 = -1;
					j1 = 0;
				} else {
					i1 = 1;
					j1 = 0;
				}
				if ((i & 4) == 0) {
					i2 = 0;
					j2 = -1;
				} else {
					i2 = 0;
					j2 = 1;
				}
			} else {
				if ((i & 2) != 0) {
					i1 = 2;
					j1 = 1;
				} else {
					i1 = 0;
					j1 = 1;
				}
				if ((i & 4) != 0) {
					i2 = 1;
					j2 = 2;
				} else {
					i2 = 1;
					j2 = 0;
				}
			}
			output[i * 4 + 0] = new LatticePoint(0, 0);
			output[i * 4 + 1] = new LatticePoint(1, 1);
			output[i * 4 + 2] = new LatticePoint(i1, j1);
			output[i * 4 + 3] = new LatticePoint(i2, j2);
		}

		return output;
	})();
	static readonly #LOOKUP_3D: ReadonlyArray<LatticePoint> = ((): LatticePoint[] => {
		const output: LatticePoint[] = [];

		for (let i = 0; i < 8; i++) {
			const i1 = (i >> 0) & 1;
			const j1 = (i >> 1) & 1;
			const k1 = (i >> 2) & 1;
			const i2 = i1 ^ 1;
			const j2 = j1 ^ 1;
			const k2 = k1 ^ 1;

			// The two points within this octant, one from each of the two cubic half-lattices
			const c0: LatticePoint = new LatticePoint(i1, j1, k1, undefined, 0);
			const c1: LatticePoint = new LatticePoint(i1 + i2, j1 + j2, k1 + k2, undefined, 1);

			// (1, 0, 0) vs (0, 1, 1) away from octant
			const c2: LatticePoint = new LatticePoint(i1 ^ 1, j1, k1, undefined, 0);
			const c3: LatticePoint = new LatticePoint(i1, j1 ^ 1, k1 ^ 1, undefined, 0);

			// (1, 0, 0) vs (0, 1, 1) away from octant on second half-lattice
			const c4: LatticePoint = new LatticePoint(i1 + (i2 ^ 1), j1 + j2, k1 + k2, undefined, 1);
			const c5: LatticePoint = new LatticePoint(i1 + i2, j1 + (j2 ^ 1), k1 + (k2 ^ 1), undefined, 1);

			// (0, 1, 0) vs (1, 0, 1) away from octant
			const c6: LatticePoint = new LatticePoint(i1, j1 ^ 1, k1, undefined, 0);
			const c7: LatticePoint = new LatticePoint(i1 ^ 1, j1, k1 ^ 1, undefined, 0);

			// (0, 1, 0) vs (1, 0, 1) away from octant on second half-lattice
			const c8: LatticePoint = new LatticePoint(i1 + i2, j1 + (j2 ^ 1), k1 + k2, undefined, 1);
			const c9: LatticePoint = new LatticePoint(i1 + (i2 ^ 1), j1 + j2, k1 + (k2 ^ 1), undefined, 1);

			// (0, 0, 1) vs (1, 1, 0) away from octant
			const cA: LatticePoint = new LatticePoint(i1, j1, k1 ^ 1, undefined, 0);
			const cB: LatticePoint = new LatticePoint(i1 ^ 1, j1 ^ 1, k1, undefined, 0);

			// (0, 0, 1) vs (1, 1, 0) away from octant on second half-lattice
			const cC: LatticePoint = new LatticePoint(i1 + i2, j1 + j2, k1 + (k2 ^ 1), undefined, 1);
			const cD: LatticePoint = new LatticePoint(i1 + (i2 ^ 1), j1 + (j2 ^ 1), k1 + k2, undefined, 1);

			// First two points are guaranteed
			c0.nextOnFailure = c0.nextOnSuccess = c1;
			c1.nextOnFailure = c1.nextOnSuccess = c2;

			// If c2 is in range, then c3 and c4 are not
			c2.nextOnFailure = c3;
			c2.nextOnSuccess = c5;
			c3.nextOnFailure = c3.nextOnSuccess = c4;

			// If c4 is in range, then c5 is not
			c4.nextOnFailure = c5;
			c4.nextOnSuccess = c5.nextOnFailure = c5.nextOnSuccess = c6;

			// If c6 is in range, then c7 and c8 are not
			c6.nextOnFailure = c7;
			c6.nextOnSuccess = c9;
			c7.nextOnFailure = c7.nextOnSuccess = c8;

			// If c8 is in range, then c9 is not
			c8.nextOnFailure = c9;
			c8.nextOnSuccess = c9.nextOnFailure = c9.nextOnSuccess = cA;

			// If cA is in range, then cB and cC are not
			cA.nextOnFailure = cB;
			cA.nextOnSuccess = cD;
			cB.nextOnFailure = cB.nextOnSuccess = cC;

			// If cC is in range, then cD is not
			cC.nextOnFailure = cD;

			output[i] = c0;
		}

		return output;
	})();
	static readonly #LOOKUP_4D: ReadonlyArray<ReadonlyArray<LatticePoint>> = ((): LatticePoint[][] => {
		const output: LatticePoint[][] = [];

		const lookup4DPregen: number[][] = [
			[ 0x15, 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA ],
			[ 0x01, 0x05, 0x11, 0x15, 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA ],
			[ 0x01, 0x15, 0x16, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA ],
			[ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA ],
			[ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA ],
			[ 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA, 0xAB ],
			[ 0x04, 0x05, 0x14, 0x15, 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA ],
			[ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA ],
			[ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA ],
			[ 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x6A, 0x9A, 0xAA, 0xAB ],
			[ 0x04, 0x15, 0x19, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA, 0xAE ],
			[ 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x5E, 0x6A, 0x9A, 0xAA, 0xAE ],
			[ 0x05, 0x15, 0x1A, 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x5E, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x11, 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA ],
			[ 0x11, 0x15, 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA ],
			[ 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA, 0xAB ],
			[ 0x14, 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA6, 0xA9, 0xAA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x15, 0x16, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x6B, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x14, 0x15, 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xAA ],
			[ 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x6B, 0x9A, 0xAA, 0xAB ],
			[ 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x19, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x9A, 0xAA, 0xAE ],
			[ 0x15, 0x1A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x10, 0x11, 0x14, 0x15, 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA ],
			[ 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA ],
			[ 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x67, 0x6A, 0xA6, 0xAA, 0xAB ],
			[ 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA ],
			[ 0x15, 0x16, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x6B, 0xA6, 0xAA, 0xAB ],
			[ 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA ],
			[ 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0xAA, 0xAB ],
			[ 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x6D, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x19, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x6E, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0xAA, 0xAE ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x10, 0x15, 0x25, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA, 0xBA ],
			[ 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0x76, 0xA6, 0xAA, 0xBA ],
			[ 0x11, 0x15, 0x26, 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x67, 0x6A, 0x76, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
			[ 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x25, 0x55, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x25, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA6, 0xAA, 0xBA ],
			[ 0x15, 0x26, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
			[ 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0x79, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x25, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x25, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xAA, 0xBA ],
			[ 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
			[ 0x14, 0x15, 0x29, 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0x6D, 0x79, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
			[ 0x15, 0x29, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
			[ 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x7A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF ],
			[ 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x41, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA ],
			[ 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA ],
			[ 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x44, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x45, 0x46, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB ],
			[ 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA ],
			[ 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x9A, 0x9B, 0xAA, 0xAB ],
			[ 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x45, 0x49, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE ],
			[ 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x99, 0x9A, 0x9E, 0xAA, 0xAE ],
			[ 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x55, 0x56, 0x59, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB ],
			[ 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x56, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE ],
			[ 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA ],
			[ 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xA7, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA ],
			[ 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA ],
			[ 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAD, 0xAE ],
			[ 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x51, 0x55, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA ],
			[ 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA ],
			[ 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x6A, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB ],
			[ 0x54, 0x55, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA ],
			[ 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
			[ 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA ],
			[ 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE ],
			[ 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
			[ 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF ],
			[ 0x40, 0x41, 0x44, 0x45, 0x50, 0x51, 0x54, 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA ],
			[ 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA ],
			[ 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA ],
			[ 0x45, 0x46, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB ],
			[ 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA ],
			[ 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xAA, 0xAB ],
			[ 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x95, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE ],
			[ 0x45, 0x49, 0x55, 0x59, 0x5A, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE ],
			[ 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xAA, 0xAE ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA ],
			[ 0x51, 0x52, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA ],
			[ 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA ],
			[ 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x58, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE ],
			[ 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA ],
			[ 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB ],
			[ 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE ],
			[ 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xAF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA ],
			[ 0x51, 0x55, 0x61, 0x65, 0x66, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA ],
			[ 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB ],
			[ 0x54, 0x55, 0x64, 0x65, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA ],
			[ 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
			[ 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA ],
			[ 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
			[ 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xBB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
			[ 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA ],
			[ 0x40, 0x45, 0x51, 0x54, 0x55, 0x85, 0x91, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA, 0xEA ],
			[ 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xD6, 0xEA ],
			[ 0x41, 0x45, 0x51, 0x55, 0x56, 0x86, 0x92, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB, 0xD6, 0xEA, 0xEB ],
			[ 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xEA ],
			[ 0x45, 0x55, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xDA, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xDA, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x86, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB ],
			[ 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xD9, 0xEA ],
			[ 0x45, 0x55, 0x59, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xDA, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xDA, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB ],
			[ 0x44, 0x45, 0x54, 0x55, 0x59, 0x89, 0x95, 0x98, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE, 0xD9, 0xEA, 0xEE ],
			[ 0x45, 0x55, 0x59, 0x89, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE ],
			[ 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xDA, 0xEA, 0xEF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x51, 0x55, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x91, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x92, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB ],
			[ 0x54, 0x55, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA ],
			[ 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB ],
			[ 0x54, 0x55, 0x59, 0x94, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA ],
			[ 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB ],
			[ 0x54, 0x55, 0x59, 0x95, 0x98, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE ],
			[ 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
			[ 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xEA, 0xEF ],
			[ 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xE5, 0xEA ],
			[ 0x51, 0x55, 0x65, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB ],
			[ 0x54, 0x55, 0x65, 0x94, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA ],
			[ 0x55, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x94, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x55, 0x56, 0x59, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
			[ 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA, 0xEB ],
			[ 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE ],
			[ 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
			[ 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xEA ],
			[ 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA1, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA, 0xE5, 0xEA, 0xFA ],
			[ 0x51, 0x55, 0x65, 0x95, 0xA1, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA ],
			[ 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA ],
			[ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xE6, 0xEA, 0xFB ],
			[ 0x54, 0x55, 0x65, 0x95, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA ],
			[ 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
			[ 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
			[ 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xEA, 0xFB ],
			[ 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA ],
			[ 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
			[ 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
			[ 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xEA ],
			[ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xE9, 0xEA, 0xFE ],
			[ 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA, 0xFE ],
			[ 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA ],
			[ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA, 0xEA ]
		];
		const latticePoints: LatticePoint[] = [];
		for (let i = 0; i < 0xFF; i++) {
			const cx: number = ((i >> 0) & 3) - 1;
			const cy: number = ((i >> 2) & 3) - 1;
			const cz: number = ((i >> 4) & 3) - 1;
			const cw: number = ((i >> 6) & 3) - 1;
			latticePoints[i] = new LatticePoint(cx, cy, cz, cw);
		}
		for (let i = 0; i < 0xFF; i++) {
			const row: LatticePoint[] = [];
			for (let j = 0; j < (lookup4DPregen[i]?.length ?? 0); j++) {
				const point: LatticePoint | undefined = latticePoints[lookup4DPregen[i]?.[j] ?? 0];
				if (point) {
					row[j] = point;
				}
			}
			output[i] = row;
		}

		return output;
	})();
	static readonly #N2: number = 0.05481866495625118;
	static readonly #N3: number = 0.2781926117527186;
	static readonly #N4: number = 0.11127401889945551;
	static readonly #GRADIENTS_2D: ReadonlyArray<Gradient> = ((): Gradient[] => {
		const output: Gradient[] = [];

		const grad2: Gradient[] = [
			new Gradient(0.130526192220052, 0.99144486137381),
			new Gradient(0.38268343236509, 0.923879532511287),
			new Gradient(0.608761429008721, 0.793353340291235),
			new Gradient(0.793353340291235, 0.608761429008721),
			new Gradient(0.923879532511287, 0.38268343236509),
			new Gradient(0.99144486137381, 0.130526192220051),
			new Gradient(0.99144486137381, -0.130526192220051),
			new Gradient(0.923879532511287, -0.38268343236509),
			new Gradient(0.793353340291235, -0.60876142900872),
			new Gradient(0.608761429008721, -0.793353340291235),
			new Gradient(0.38268343236509, -0.923879532511287),
			new Gradient(0.130526192220052, -0.99144486137381),
			new Gradient(-0.130526192220052, -0.99144486137381),
			new Gradient(-0.38268343236509, -0.923879532511287),
			new Gradient(-0.608761429008721, -0.793353340291235),
			new Gradient(-0.793353340291235, -0.608761429008721),
			new Gradient(-0.923879532511287, -0.38268343236509),
			new Gradient(-0.99144486137381, -0.130526192220052),
			new Gradient(-0.99144486137381, 0.130526192220051),
			new Gradient(-0.923879532511287, 0.38268343236509),
			new Gradient(-0.793353340291235, 0.608761429008721),
			new Gradient(-0.608761429008721, 0.793353340291235),
			new Gradient(-0.38268343236509, 0.923879532511287),
			new Gradient(-0.130526192220052, 0.99144486137381)
		];
		for (let i = 0; i < grad2.length; i++) {
			(grad2[i] as Gradient).dx /= Simplex.#N2;
			(grad2[i] as Gradient).dy /= Simplex.#N2;
		}
		for (let i = 0; i < Simplex.#PSIZE; i++) {
			output[i] = grad2[i % grad2.length] as Gradient;
		}

		return output;
	})();
	static readonly #GRADIENTS_3D: ReadonlyArray<Gradient> = ((): Gradient[] => {
		const output: Gradient[] = [];

		const grad3: Gradient[] = [
			new Gradient(-2.22474487139, -2.22474487139, -1.0),
			new Gradient(-2.22474487139, -2.22474487139, 1.0),
			new Gradient(-3.0862664687972017, -1.1721513422464978, 0.0),
			new Gradient(-1.1721513422464978, -3.0862664687972017, 0.0),
			new Gradient(-2.22474487139, -1.0, -2.22474487139),
			new Gradient(-2.22474487139, 1.0, -2.22474487139),
			new Gradient(-1.1721513422464978, 0.0, -3.0862664687972017),
			new Gradient(-3.0862664687972017, 0.0, -1.1721513422464978),
			new Gradient(-2.22474487139, -1.0, 2.22474487139),
			new Gradient(-2.22474487139, 1.0, 2.22474487139),
			new Gradient(-3.0862664687972017, 0.0, 1.1721513422464978),
			new Gradient(-1.1721513422464978, 0.0, 3.0862664687972017),
			new Gradient(-2.22474487139, 2.22474487139, -1.0),
			new Gradient(-2.22474487139, 2.22474487139, 1.0),
			new Gradient(-1.1721513422464978, 3.0862664687972017, 0.0),
			new Gradient(-3.0862664687972017, 1.1721513422464978, 0.0),
			new Gradient(-1.0, -2.22474487139, -2.22474487139),
			new Gradient(1.0, -2.22474487139, -2.22474487139),
			new Gradient(0.0, -3.0862664687972017, -1.1721513422464978),
			new Gradient(0.0, -1.1721513422464978, -3.0862664687972017),
			new Gradient(-1.0, -2.22474487139, 2.22474487139),
			new Gradient(1.0, -2.22474487139, 2.22474487139),
			new Gradient(0.0, -1.1721513422464978, 3.0862664687972017),
			new Gradient(0.0, -3.0862664687972017, 1.1721513422464978),
			new Gradient(-1.0, 2.22474487139, -2.22474487139),
			new Gradient(1.0, 2.22474487139, -2.22474487139),
			new Gradient(0.0, 1.1721513422464978, -3.0862664687972017),
			new Gradient(0.0, 3.0862664687972017, -1.1721513422464978),
			new Gradient(-1.0, 2.22474487139, 2.22474487139),
			new Gradient(1.0, 2.22474487139, 2.22474487139),
			new Gradient(0.0, 3.0862664687972017, 1.1721513422464978),
			new Gradient(0.0, 1.1721513422464978, 3.0862664687972017),
			new Gradient(2.22474487139, -2.22474487139, -1.0),
			new Gradient(2.22474487139, -2.22474487139, 1.0),
			new Gradient(1.1721513422464978, -3.0862664687972017, 0.0),
			new Gradient(3.0862664687972017, -1.1721513422464978, 0.0),
			new Gradient(2.22474487139, -1.0, -2.22474487139),
			new Gradient(2.22474487139, 1.0, -2.22474487139),
			new Gradient(3.0862664687972017, 0.0, -1.1721513422464978),
			new Gradient(1.1721513422464978, 0.0, -3.0862664687972017),
			new Gradient(2.22474487139, -1.0, 2.22474487139),
			new Gradient(2.22474487139, 1.0, 2.22474487139),
			new Gradient(1.1721513422464978, 0.0, 3.0862664687972017),
			new Gradient(3.0862664687972017, 0.0, 1.1721513422464978),
			new Gradient(2.22474487139, 2.22474487139, -1.0),
			new Gradient(2.22474487139, 2.22474487139, 1.0),
			new Gradient(3.0862664687972017, 1.1721513422464978, 0.0),
			new Gradient(1.1721513422464978, 3.0862664687972017, 0.0)
		];
		for (let i = 0; i < grad3.length; i++) {
			(grad3[i] as Gradient).dx /= Simplex.#N3;
			(grad3[i] as Gradient).dy /= Simplex.#N3;
			((grad3[i] as Gradient).dz as number) /= Simplex.#N3;
		}
		for (let i = 0; i < Simplex.#PSIZE; i++) {
			output[i] = grad3[i % grad3.length] as Gradient;
		}

		return output;
	})();
	static readonly #GRADIENTS_4D: ReadonlyArray<Gradient> = ((): Gradient[] => {
		const output: Gradient[] = [];

		const grad4: Gradient[] = [
			new Gradient(-0.753341017856078, -0.37968289875261624, -0.37968289875261624, -0.37968289875261624),
			new Gradient(-0.7821684431180708, -0.4321472685365301, -0.4321472685365301, 0.12128480194602098),
			new Gradient(-0.7821684431180708, -0.4321472685365301, 0.12128480194602098, -0.4321472685365301),
			new Gradient(-0.7821684431180708, 0.12128480194602098, -0.4321472685365301, -0.4321472685365301),
			new Gradient(-0.8586508742123365, -0.508629699630796, 0.044802370851755174, 0.044802370851755174),
			new Gradient(-0.8586508742123365, 0.044802370851755174, -0.508629699630796, 0.044802370851755174),
			new Gradient(-0.8586508742123365, 0.044802370851755174, 0.044802370851755174, -0.508629699630796),
			new Gradient(-0.9982828964265062, -0.03381941603233842, -0.03381941603233842, -0.03381941603233842),
			new Gradient(-0.37968289875261624, -0.753341017856078, -0.37968289875261624, -0.37968289875261624),
			new Gradient(-0.4321472685365301, -0.7821684431180708, -0.4321472685365301, 0.12128480194602098),
			new Gradient(-0.4321472685365301, -0.7821684431180708, 0.12128480194602098, -0.4321472685365301),
			new Gradient(0.12128480194602098, -0.7821684431180708, -0.4321472685365301, -0.4321472685365301),
			new Gradient(-0.508629699630796, -0.8586508742123365, 0.044802370851755174, 0.044802370851755174),
			new Gradient(0.044802370851755174, -0.8586508742123365, -0.508629699630796, 0.044802370851755174),
			new Gradient(0.044802370851755174, -0.8586508742123365, 0.044802370851755174, -0.508629699630796),
			new Gradient(-0.03381941603233842, -0.9982828964265062, -0.03381941603233842, -0.03381941603233842),
			new Gradient(-0.37968289875261624, -0.37968289875261624, -0.753341017856078, -0.37968289875261624),
			new Gradient(-0.4321472685365301, -0.4321472685365301, -0.7821684431180708, 0.12128480194602098),
			new Gradient(-0.4321472685365301, 0.12128480194602098, -0.7821684431180708, -0.4321472685365301),
			new Gradient(0.12128480194602098, -0.4321472685365301, -0.7821684431180708, -0.4321472685365301),
			new Gradient(-0.508629699630796, 0.044802370851755174, -0.8586508742123365, 0.044802370851755174),
			new Gradient(0.044802370851755174, -0.508629699630796, -0.8586508742123365, 0.044802370851755174),
			new Gradient(0.044802370851755174, 0.044802370851755174, -0.8586508742123365, -0.508629699630796),
			new Gradient(-0.03381941603233842, -0.03381941603233842, -0.9982828964265062, -0.03381941603233842),
			new Gradient(-0.37968289875261624, -0.37968289875261624, -0.37968289875261624, -0.753341017856078),
			new Gradient(-0.4321472685365301, -0.4321472685365301, 0.12128480194602098, -0.7821684431180708),
			new Gradient(-0.4321472685365301, 0.12128480194602098, -0.4321472685365301, -0.7821684431180708),
			new Gradient(0.12128480194602098, -0.4321472685365301, -0.4321472685365301, -0.7821684431180708),
			new Gradient(-0.508629699630796, 0.044802370851755174, 0.044802370851755174, -0.8586508742123365),
			new Gradient(0.044802370851755174, -0.508629699630796, 0.044802370851755174, -0.8586508742123365),
			new Gradient(0.044802370851755174, 0.044802370851755174, -0.508629699630796, -0.8586508742123365),
			new Gradient(-0.03381941603233842, -0.03381941603233842, -0.03381941603233842, -0.9982828964265062),
			new Gradient(-0.6740059517812944, -0.3239847771997537, -0.3239847771997537, 0.5794684678643381),
			new Gradient(-0.7504883828755602, -0.4004672082940195, 0.15296486218853164, 0.5029860367700724),
			new Gradient(-0.7504883828755602, 0.15296486218853164, -0.4004672082940195, 0.5029860367700724),
			new Gradient(-0.8828161875373585, 0.08164729285680945, 0.08164729285680945, 0.4553054119602712),
			new Gradient(-0.4553054119602712, -0.08164729285680945, -0.08164729285680945, 0.8828161875373585),
			new Gradient(-0.5029860367700724, -0.15296486218853164, 0.4004672082940195, 0.7504883828755602),
			new Gradient(-0.5029860367700724, 0.4004672082940195, -0.15296486218853164, 0.7504883828755602),
			new Gradient(-0.5794684678643381, 0.3239847771997537, 0.3239847771997537, 0.6740059517812944),
			new Gradient(-0.3239847771997537, -0.6740059517812944, -0.3239847771997537, 0.5794684678643381),
			new Gradient(-0.4004672082940195, -0.7504883828755602, 0.15296486218853164, 0.5029860367700724),
			new Gradient(0.15296486218853164, -0.7504883828755602, -0.4004672082940195, 0.5029860367700724),
			new Gradient(0.08164729285680945, -0.8828161875373585, 0.08164729285680945, 0.4553054119602712),
			new Gradient(-0.08164729285680945, -0.4553054119602712, -0.08164729285680945, 0.8828161875373585),
			new Gradient(-0.15296486218853164, -0.5029860367700724, 0.4004672082940195, 0.7504883828755602),
			new Gradient(0.4004672082940195, -0.5029860367700724, -0.15296486218853164, 0.7504883828755602),
			new Gradient(0.3239847771997537, -0.5794684678643381, 0.3239847771997537, 0.6740059517812944),
			new Gradient(-0.3239847771997537, -0.3239847771997537, -0.6740059517812944, 0.5794684678643381),
			new Gradient(-0.4004672082940195, 0.15296486218853164, -0.7504883828755602, 0.5029860367700724),
			new Gradient(0.15296486218853164, -0.4004672082940195, -0.7504883828755602, 0.5029860367700724),
			new Gradient(0.08164729285680945, 0.08164729285680945, -0.8828161875373585, 0.4553054119602712),
			new Gradient(-0.08164729285680945, -0.08164729285680945, -0.4553054119602712, 0.8828161875373585),
			new Gradient(-0.15296486218853164, 0.4004672082940195, -0.5029860367700724, 0.7504883828755602),
			new Gradient(0.4004672082940195, -0.15296486218853164, -0.5029860367700724, 0.7504883828755602),
			new Gradient(0.3239847771997537, 0.3239847771997537, -0.5794684678643381, 0.6740059517812944),
			new Gradient(-0.6740059517812944, -0.3239847771997537, 0.5794684678643381, -0.3239847771997537),
			new Gradient(-0.7504883828755602, -0.4004672082940195, 0.5029860367700724, 0.15296486218853164),
			new Gradient(-0.7504883828755602, 0.15296486218853164, 0.5029860367700724, -0.4004672082940195),
			new Gradient(-0.8828161875373585, 0.08164729285680945, 0.4553054119602712, 0.08164729285680945),
			new Gradient(-0.4553054119602712, -0.08164729285680945, 0.8828161875373585, -0.08164729285680945),
			new Gradient(-0.5029860367700724, -0.15296486218853164, 0.7504883828755602, 0.4004672082940195),
			new Gradient(-0.5029860367700724, 0.4004672082940195, 0.7504883828755602, -0.15296486218853164),
			new Gradient(-0.5794684678643381, 0.3239847771997537, 0.6740059517812944, 0.3239847771997537),
			new Gradient(-0.3239847771997537, -0.6740059517812944, 0.5794684678643381, -0.3239847771997537),
			new Gradient(-0.4004672082940195, -0.7504883828755602, 0.5029860367700724, 0.15296486218853164),
			new Gradient(0.15296486218853164, -0.7504883828755602, 0.5029860367700724, -0.4004672082940195),
			new Gradient(0.08164729285680945, -0.8828161875373585, 0.4553054119602712, 0.08164729285680945),
			new Gradient(-0.08164729285680945, -0.4553054119602712, 0.8828161875373585, -0.08164729285680945),
			new Gradient(-0.15296486218853164, -0.5029860367700724, 0.7504883828755602, 0.4004672082940195),
			new Gradient(0.4004672082940195, -0.5029860367700724, 0.7504883828755602, -0.15296486218853164),
			new Gradient(0.3239847771997537, -0.5794684678643381, 0.6740059517812944, 0.3239847771997537),
			new Gradient(-0.3239847771997537, -0.3239847771997537, 0.5794684678643381, -0.6740059517812944),
			new Gradient(-0.4004672082940195, 0.15296486218853164, 0.5029860367700724, -0.7504883828755602),
			new Gradient(0.15296486218853164, -0.4004672082940195, 0.5029860367700724, -0.7504883828755602),
			new Gradient(0.08164729285680945, 0.08164729285680945, 0.4553054119602712, -0.8828161875373585),
			new Gradient(-0.08164729285680945, -0.08164729285680945, 0.8828161875373585, -0.4553054119602712),
			new Gradient(-0.15296486218853164, 0.4004672082940195, 0.7504883828755602, -0.5029860367700724),
			new Gradient(0.4004672082940195, -0.15296486218853164, 0.7504883828755602, -0.5029860367700724),
			new Gradient(0.3239847771997537, 0.3239847771997537, 0.6740059517812944, -0.5794684678643381),
			new Gradient(-0.6740059517812944, 0.5794684678643381, -0.3239847771997537, -0.3239847771997537),
			new Gradient(-0.7504883828755602, 0.5029860367700724, -0.4004672082940195, 0.15296486218853164),
			new Gradient(-0.7504883828755602, 0.5029860367700724, 0.15296486218853164, -0.4004672082940195),
			new Gradient(-0.8828161875373585, 0.4553054119602712, 0.08164729285680945, 0.08164729285680945),
			new Gradient(-0.4553054119602712, 0.8828161875373585, -0.08164729285680945, -0.08164729285680945),
			new Gradient(-0.5029860367700724, 0.7504883828755602, -0.15296486218853164, 0.4004672082940195),
			new Gradient(-0.5029860367700724, 0.7504883828755602, 0.4004672082940195, -0.15296486218853164),
			new Gradient(-0.5794684678643381, 0.6740059517812944, 0.3239847771997537, 0.3239847771997537),
			new Gradient(-0.3239847771997537, 0.5794684678643381, -0.6740059517812944, -0.3239847771997537),
			new Gradient(-0.4004672082940195, 0.5029860367700724, -0.7504883828755602, 0.15296486218853164),
			new Gradient(0.15296486218853164, 0.5029860367700724, -0.7504883828755602, -0.4004672082940195),
			new Gradient(0.08164729285680945, 0.4553054119602712, -0.8828161875373585, 0.08164729285680945),
			new Gradient(-0.08164729285680945, 0.8828161875373585, -0.4553054119602712, -0.08164729285680945),
			new Gradient(-0.15296486218853164, 0.7504883828755602, -0.5029860367700724, 0.4004672082940195),
			new Gradient(0.4004672082940195, 0.7504883828755602, -0.5029860367700724, -0.15296486218853164),
			new Gradient(0.3239847771997537, 0.6740059517812944, -0.5794684678643381, 0.3239847771997537),
			new Gradient(-0.3239847771997537, 0.5794684678643381, -0.3239847771997537, -0.6740059517812944),
			new Gradient(-0.4004672082940195, 0.5029860367700724, 0.15296486218853164, -0.7504883828755602),
			new Gradient(0.15296486218853164, 0.5029860367700724, -0.4004672082940195, -0.7504883828755602),
			new Gradient(0.08164729285680945, 0.4553054119602712, 0.08164729285680945, -0.8828161875373585),
			new Gradient(-0.08164729285680945, 0.8828161875373585, -0.08164729285680945, -0.4553054119602712),
			new Gradient(-0.15296486218853164, 0.7504883828755602, 0.4004672082940195, -0.5029860367700724),
			new Gradient(0.4004672082940195, 0.7504883828755602, -0.15296486218853164, -0.5029860367700724),
			new Gradient(0.3239847771997537, 0.6740059517812944, 0.3239847771997537, -0.5794684678643381),
			new Gradient(0.5794684678643381, -0.6740059517812944, -0.3239847771997537, -0.3239847771997537),
			new Gradient(0.5029860367700724, -0.7504883828755602, -0.4004672082940195, 0.15296486218853164),
			new Gradient(0.5029860367700724, -0.7504883828755602, 0.15296486218853164, -0.4004672082940195),
			new Gradient(0.4553054119602712, -0.8828161875373585, 0.08164729285680945, 0.08164729285680945),
			new Gradient(0.8828161875373585, -0.4553054119602712, -0.08164729285680945, -0.08164729285680945),
			new Gradient(0.7504883828755602, -0.5029860367700724, -0.15296486218853164, 0.4004672082940195),
			new Gradient(0.7504883828755602, -0.5029860367700724, 0.4004672082940195, -0.15296486218853164),
			new Gradient(0.6740059517812944, -0.5794684678643381, 0.3239847771997537, 0.3239847771997537),
			new Gradient(0.5794684678643381, -0.3239847771997537, -0.6740059517812944, -0.3239847771997537),
			new Gradient(0.5029860367700724, -0.4004672082940195, -0.7504883828755602, 0.15296486218853164),
			new Gradient(0.5029860367700724, 0.15296486218853164, -0.7504883828755602, -0.4004672082940195),
			new Gradient(0.4553054119602712, 0.08164729285680945, -0.8828161875373585, 0.08164729285680945),
			new Gradient(0.8828161875373585, -0.08164729285680945, -0.4553054119602712, -0.08164729285680945),
			new Gradient(0.7504883828755602, -0.15296486218853164, -0.5029860367700724, 0.4004672082940195),
			new Gradient(0.7504883828755602, 0.4004672082940195, -0.5029860367700724, -0.15296486218853164),
			new Gradient(0.6740059517812944, 0.3239847771997537, -0.5794684678643381, 0.3239847771997537),
			new Gradient(0.5794684678643381, -0.3239847771997537, -0.3239847771997537, -0.6740059517812944),
			new Gradient(0.5029860367700724, -0.4004672082940195, 0.15296486218853164, -0.7504883828755602),
			new Gradient(0.5029860367700724, 0.15296486218853164, -0.4004672082940195, -0.7504883828755602),
			new Gradient(0.4553054119602712, 0.08164729285680945, 0.08164729285680945, -0.8828161875373585),
			new Gradient(0.8828161875373585, -0.08164729285680945, -0.08164729285680945, -0.4553054119602712),
			new Gradient(0.7504883828755602, -0.15296486218853164, 0.4004672082940195, -0.5029860367700724),
			new Gradient(0.7504883828755602, 0.4004672082940195, -0.15296486218853164, -0.5029860367700724),
			new Gradient(0.6740059517812944, 0.3239847771997537, 0.3239847771997537, -0.5794684678643381),
			new Gradient(0.03381941603233842, 0.03381941603233842, 0.03381941603233842, 0.9982828964265062),
			new Gradient(-0.044802370851755174, -0.044802370851755174, 0.508629699630796, 0.8586508742123365),
			new Gradient(-0.044802370851755174, 0.508629699630796, -0.044802370851755174, 0.8586508742123365),
			new Gradient(-0.12128480194602098, 0.4321472685365301, 0.4321472685365301, 0.7821684431180708),
			new Gradient(0.508629699630796, -0.044802370851755174, -0.044802370851755174, 0.8586508742123365),
			new Gradient(0.4321472685365301, -0.12128480194602098, 0.4321472685365301, 0.7821684431180708),
			new Gradient(0.4321472685365301, 0.4321472685365301, -0.12128480194602098, 0.7821684431180708),
			new Gradient(0.37968289875261624, 0.37968289875261624, 0.37968289875261624, 0.753341017856078),
			new Gradient(0.03381941603233842, 0.03381941603233842, 0.9982828964265062, 0.03381941603233842),
			new Gradient(-0.044802370851755174, 0.044802370851755174, 0.8586508742123365, 0.508629699630796),
			new Gradient(-0.044802370851755174, 0.508629699630796, 0.8586508742123365, -0.044802370851755174),
			new Gradient(-0.12128480194602098, 0.4321472685365301, 0.7821684431180708, 0.4321472685365301),
			new Gradient(0.508629699630796, -0.044802370851755174, 0.8586508742123365, -0.044802370851755174),
			new Gradient(0.4321472685365301, -0.12128480194602098, 0.7821684431180708, 0.4321472685365301),
			new Gradient(0.4321472685365301, 0.4321472685365301, 0.7821684431180708, -0.12128480194602098),
			new Gradient(0.37968289875261624, 0.37968289875261624, 0.753341017856078, 0.37968289875261624),
			new Gradient(0.03381941603233842, 0.9982828964265062, 0.03381941603233842, 0.03381941603233842),
			new Gradient(-0.044802370851755174, 0.8586508742123365, -0.044802370851755174, 0.508629699630796),
			new Gradient(-0.044802370851755174, 0.8586508742123365, 0.508629699630796, -0.044802370851755174),
			new Gradient(-0.12128480194602098, 0.7821684431180708, 0.4321472685365301, 0.4321472685365301),
			new Gradient(0.508629699630796, 0.8586508742123365, -0.044802370851755174, -0.044802370851755174),
			new Gradient(0.4321472685365301, 0.7821684431180708, -0.12128480194602098, 0.4321472685365301),
			new Gradient(0.4321472685365301, 0.7821684431180708, 0.4321472685365301, -0.12128480194602098),
			new Gradient(0.37968289875261624, 0.753341017856078, 0.37968289875261624, 0.37968289875261624),
			new Gradient(0.9982828964265062, 0.03381941603233842, 0.03381941603233842, 0.03381941603233842),
			new Gradient(0.8586508742123365, -0.044802370851755174, -0.044802370851755174, 0.508629699630796),
			new Gradient(0.8586508742123365, -0.044802370851755174, 0.508629699630796, -0.044802370851755174),
			new Gradient(0.7821684431180708, -0.12128480194602098, 0.4321472685365301, 0.4321472685365301),
			new Gradient(0.8586508742123365, 0.508629699630796, -0.044802370851755174, -0.044802370851755174),
			new Gradient(0.7821684431180708, 0.4321472685365301, -0.12128480194602098, 0.4321472685365301),
			new Gradient(0.7821684431180708, 0.4321472685365301, 0.4321472685365301, -0.12128480194602098),
			new Gradient(0.753341017856078, 0.37968289875261624, 0.37968289875261624, 0.37968289875261624)
		];
		for (let i = 0; i < grad4.length; i++) {
			(grad4[i] as Gradient).dx /= Simplex.#N4;
			(grad4[i] as Gradient).dy /= Simplex.#N4;
			((grad4[i] as Gradient).dz as number) /= Simplex.#N4;
			((grad4[i] as Gradient).dw as number) /= Simplex.#N4;
		}
		for (let i = 0; i < Simplex.#PSIZE; i++) {
			output[i] = (grad4[i % grad4.length] as Gradient);
		}

		return output;
	})();

	readonly #perm: ReadonlyArray<number>;
	readonly #permGradient2: ReadonlyArray<Gradient>;
	readonly #permGradient3: ReadonlyArray<Gradient>;
	readonly #permGradient4: ReadonlyArray<Gradient>;

	#noise2DBase(xs: number, ys: number): number {
		let value = 0;

		// Get base points and offsets
		const xsb: number = Simplex.#fastFloor(xs);
		const ysb: number = Simplex.#fastFloor(ys);
		const xsi: number = xs - xsb;
		const ysi: number = ys - ysb;

		// Index to point list
		const a: number = Math.floor(xsi + ysi);
		const index: number =
			(a << 2)
			| Math.floor(xsi - Math.floor(ysi / 2) + 1 - a / 2) << 3
			| Math.floor(ysi - Math.floor(xsi / 2) + 1 - a / 2) << 4;

		const ssi: number = (xsi + ysi) * -0.211324865405187;
		const xi: number = xsi + ssi;
		const yi: number = ysi + ssi;

		// Point contributions.
		for (let i = 0; i < 4; i++) {
			const c: LatticePoint = Simplex.#LOOKUP_2D[index + i] as LatticePoint;

			const dx: number = xi + c.dx;
			const dy: number = yi + c.dy;
			let attn: number = 2 / 3 - dx * dx - dy * dy;
			if (attn <= 0) {
				continue;
			}

			const pxm: number = (xsb + c.xsv) & Simplex.#PMASK;
			const pym: number = (ysb + c.ysv) % Simplex.#PMASK;
			const gradient: Gradient = (this.#permGradient2[(this.#perm[pxm] as number) ^ pym] as Gradient);
			const extrapolation: number =
				(gradient.dx ?? 0) * dx
				+ (gradient.dy ?? 0) * dy;

			attn *= attn;
			value += attn * attn * extrapolation;
		}

		return value;
	}

	#noise3DBase(xr: number, yr: number, zr: number): number {
		// Get base and offsets inside cube of first lattice
		const xrb: number = Simplex.#fastFloor(xr);
		const yrb: number = Simplex.#fastFloor(yr);
		const zrb: number = Simplex.#fastFloor(zr);
		const xri: number = xr - xrb;
		const yri: number = yr - yrb;
		const zri: number = zr - zrb;

		// Identify which octant of the cube we're in
		// This determines which cell in the other cubic lattice we're in, and also narrows down one point on each
		const xht: number = Math.floor(xri + 0.5);
		const yht: number = Math.floor(yri + 0.5);
		const zht: number = Math.floor(zri + 0.5);
		const index: number = (xht << 0) | (yht << 1) | (zht << 2);

		// Point contributions
		let value = 0;
		let c: LatticePoint = Simplex.#LOOKUP_3D[index] as LatticePoint;
		while (c != null) {
			const dxr: number = xri + c.dx;
			const dyr: number = yri + c.dy;
			const dzr: number = zri + (c.dz as number);
			let attn: number = 0.75 - dxr * dxr - dyr * dyr - dzr * dzr;
			if (attn < 0) {
				c = c.nextOnFailure as LatticePoint;
			} else {
				const pxm: number = (xrb + c.xsv) & Simplex.#PMASK;
				const pym: number = (yrb + c.ysv) & Simplex.#PMASK;
				const pzm: number = (zrb + (c.zsv as number)) & Simplex.#PMASK;
				const gradient: Gradient = this.#permGradient3[
					(this.#perm[
						(this.#perm[pxm] as number) ^ pym
					] as number) ^ pzm
				] as Gradient;
				const extrapolation: number =
					(gradient.dx ?? 0) * dxr
					+ (gradient.dy ?? 0) * dyr
					+ (gradient.dz ?? 0) * dzr;

				attn *= attn;
				value += attn * attn * extrapolation;
				c = c.nextOnSuccess as LatticePoint;
			}
		}
		return value;
	}

	#noise4DBase(xs: number, ys: number, zs: number, ws: number): number {
		let value = 0;

		// Get base points and offsets
		const xsb: number = Simplex.#fastFloor(xs);
		const ysb: number = Simplex.#fastFloor(ys);
		const zsb: number = Simplex.#fastFloor(zs);
		const wsb: number = Simplex.#fastFloor(ws);
		const xsi: number = xs - xsb;
		const ysi: number = ys - ysb;
		const zsi: number = zs - zsb;
		const wsi: number = ws - wsb;

		// Unskewed offsets
		const ssi: number = (xsi + ysi + zsi + wsi) * -0.138196601125011;
		const xi: number = xsi + ssi;
		const yi: number = ysi + ssi;
		const zi: number = zsi + ssi;
		const wi: number = wsi + ssi;

		const index: number =
			((Simplex.#fastFloor(xs * 4) & 3) << 0)
			| ((Simplex.#fastFloor(ys * 4) & 3) << 2)
			| ((Simplex.#fastFloor(zs * 4) & 3) << 4)
			| ((Simplex.#fastFloor(ws * 4) & 3) << 6);

		// Point contributions
		for (const c of (Simplex.#LOOKUP_4D[index] as LatticePoint[])) {
			const dx: number = xi + c.dx;
			const dy: number = yi + c.dx;
			const dz: number = zi + c.dx;
			const dw: number = wi + c.dx;
			let attn: number = 0.8 - dx * dx - dy * dy - dz * dz - dw * dw;
			if (attn > 0) {
				attn *= attn;

				const pxm: number = (xsb + c.xsv) & Simplex.#PMASK;
				const pym: number = (ysb + c.ysv) & Simplex.#PMASK;
				const pzm: number = (zsb + (c.zsv as number)) & Simplex.#PMASK;
				const pwm: number = (wsb + (c.wsv as number)) & Simplex.#PMASK;

				const gradient: Gradient = this.#permGradient4[
					(this.#perm[
						(this.#perm[
							(this.#perm[pxm] as number) ^ pym
						] as number) ^ pzm
					] as number) ^ pwm
				] as Gradient;
				const extrapolation: number =
					(gradient.dx ?? 0) * dx
					+ (gradient.dy ?? 0) * dy
					+ (gradient.dz ?? 0) * dz
					+ (gradient.dw ?? 0) * dw;

				value += attn * attn * extrapolation;
			}
		}

		return value;
	}

	/**
	 * Creates an OpenSimplex2S ("SuperSimplex") noise generator.
	 * @param seed - The seed of the noise.
	 */
	constructor(seed = BigInt(Date.now())) {
		this.seed = seed;

		const perm: number[] = [];
		const permGradient2: Gradient[] = [];
		const permGradient3: Gradient[] = [];
		const permGradient4: Gradient[] = [];

		const source: number[] = [];
		for (let i = 0; i < Simplex.#PSIZE; i++) {
			source[i] = i;
		}

		for (let i: number = Simplex.#PSIZE - 1; i >= 0; i--) {
			seed = seed * 6364136223846793005n + 1442695040888963407n;
			const r: bigint = (seed + 31n) % BigInt(i + 1);
			if (r < 0) {
				(r as bigint) += BigInt(i) + 1n;
			}
			perm[i] = source[Number(r)] as number;
			permGradient2[i] = Simplex.#GRADIENTS_2D[perm[i] as number] as Gradient;
			permGradient3[i] = Simplex.#GRADIENTS_3D[perm[i] as number] as Gradient;
			permGradient4[i] = Simplex.#GRADIENTS_4D[perm[i] as number] as Gradient;
			source[Number(r)] = source[i] as number;
		}
		this.#perm = perm;
		this.#permGradient2 = permGradient2;
		this.#permGradient3 = permGradient3;
		this.#permGradient4 = permGradient4;
	}

	/** The seed of this generator. */
	readonly seed: BigInt;

	/**
	 * Gets a 2D SuperSimplex noise value with standard lattice orientation.
	 * Ideal for heightmaps or continent maps.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise2D(x: number, y: number): number {
		// Get points for A2* lattice
		const s: number = (x + y) * 0.366025403784439;
		const xs: number = x + s;
		const ys: number = y + s;

		return this.#noise2DBase(xs, ys);
	}

	/**
	 * Gets a 2D SuperSimplex noise value with Y pointing down the main diagonal.
	 * Ideal for a 2D sandbox-style game, where Y is vertical.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise2DXBeforeY(x: number, y: number): number {
		// Skew transformation and rotation
		const xx: number = x * 0.7071067811865476;
		const yy: number = y * 1.224744871380249;

		return this.#noise2DBase(yy + xx, yy - xx);
	}

	/**
	 * Gets a 3D 8-point BCC noise value with standard orientation.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @param z - The Z coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise3D(x: number, y: number, z: number): number {
		// Reorient the cubic lattices via rotation to produce the expected look on cardinal planar slices
		// Orthonormal rotation. Not a skew transform
		const r: number = (2 / 3) * (x + y + z);
		const xr: number = r - x;
		const yr: number = r - y;
		const zr: number = r - z;

		return this.#noise3DBase(xr, yr, zr);
	}

	/**
	 * Gets a 3D 8-point BCC noise value, reoriented with better visual isotropy in (X, Y).
	 * Recommended for 3D terrain and time-varied animations.
	 * The Z coordinate should always be the "different" coordinate.
	 * If Y is vertical in world coordinates, call noise3DXY_Z(x, z, y) or use noise3DXZ_Y.
	 * If Z is vertical in world coordinates, call noise3DXY_Z(x, y, z).
	 * For a time-varied animation, call noise3DXY_Z(x, y, time).
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @param z - The Z coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise3DXYBeforeZ(x: number, y: number, z: number): number {
		// Reorient the cubic lattices without skewing to make X and Y triangular like 2D
		// Orthonormal rotation. Not a skew transform
		const xy: number = x + y;
		const s2: number = xy * -0.211324865405187;
		const zz: number = z * 0.577350269189626;
		const xr: number = x + s2 - zz;
		const yr: number = y + s2 - zz;
		const zr: number = xy * 0.577350269189626 + zz;

		// Evaluate both lattices to form a BCC lattice
		return this.#noise3DBase(xr, yr, zr);
	}

	/**
	 * Gets a 3D 8-point BCC noise value, reoriented with better visual isotropy in (X, Z).
	 * Recommended for 3D terrain and time-varied animations.
	 * The Y coordinate should always be the "different" coordinate.
	 * If Y is vertical in world coordinates, call noise3DXZ_Y(x, y, z).
	 * If Z is vertical in world coordinates, call noise3DXZ_Y(x, z, y) or use noise3DXY_Z.
	 * For a time-varied animation, call noise3DXZ_Y(x, time, y) or use noise3DXY_Z.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @param z - The Z coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise3DXZBeforeY(x: number, y: number, z: number): number {
		// Reorient the cubic lattices without skewing to make X and Z triangular like 2D
		// Orthonormal rotation. Not a skew transform
		const xz: number = x + z;
		const s2: number = xz * -0.211324865405187;
		const yy: number = y * 0.577350269189626;
		const xr: number = x + s2 - yy;
		const zr: number = z + s2 - yy;
		const yr: number = xz * 0.577350269189626 + yy;

		// Evaluate both lattices to form a BCC lattice
		return this.#noise3DBase(xr, yr, zr);
	}

	/**
	 * Gets a 4D SuperSimplex noise value with standard lattice orientation.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @param z - The Z coordinate to sample.
	 * @param w - The W coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise4D(x: number, y: number, z: number, w: number): number {
		// Get points for A4 lattice
		const s: number = 0.309016994374947 * (x + y + z + w);
		const xs: number = x + s;
		const ys: number = y + s;
		const zs: number = z + s;
		const ws: number = w + s;

		return this.#noise4DBase(xs, ys, zs, ws);
	}

	/**
	 * Gets a 4D SuperSimplex noise value with XY and ZW forming orthagonal triangular-based planes.
	 * Recommended for 3D terrain, where X and Y (or Z and W) are horizontal.
	 * Recommended for the noise(x, y, sin(time), cos(time)) trick.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @param z - The Z coordinate to sample.
	 * @param w - The W coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise4DXYBeforeZW(x: number, y: number, z: number, w: number): number {
		const s2 = Number(new BigDecimal(x).add(y).multiply("-0.28522513987434876941").add(z).add(w).multiply("0.83897065470611435718"));
		const t2 = Number(new BigDecimal(z).add(w).multiply("0.21939749883706435719").add(x).add(y).multiply("-0.48214856493302476942"));
		const xs: number = x + s2;
		const ys: number = y + s2;
		const zs: number = z + t2;
		const ws: number = w + t2;

		return this.#noise4DBase(xs, ys, zs, ws);
	}

	/**
	 * Gets a 4D SuperSimplex noise value with XZ and YW forming orthagonal triangular-based planes.
	 * Recommended for 3D terrain, where X and Z (or Y and W) are horizontal.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @param z - The Z coordinate to sample.
	 * @param w - The W coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise4DXZBeforeYW(x: number, y: number, z: number, w: number): number {
		const s2 = Number(new BigDecimal(x).add(z).multiply("-0.28522513987434876941").add(y).add(w).multiply("0.83897065470611435718"));
		const t2 = Number(new BigDecimal(y).add(w).multiply("0.21939749883706435719").add(x).add(z).multiply("-0.48214856493302476942"));
		const xs: number = x + s2;
		const ys: number = y + t2;
		const zs: number = z + s2;
		const ws: number = w + t2;

		return this.#noise4DBase(xs, ys, zs, ws);
	}

	/**
	 * Gets a 4D SuperSimplex noise value with XYZ oriented like standard 3D noise.
	 * Recommended for time-varied animations which texture a 3D object.
	 * @param x - The X coordinate to sample.
	 * @param y - The Y coordinate to sample.
	 * @param z - The Z coordinate to sample.
	 * @param w - The W coordinate to sample.
	 * @returns A value in the range [-1, 1].
	 */
	noise4DXYZBeforeW(x: number, y: number, z: number, w: number): number {
		const xyz: number = x + y + z;
		const ww: number = w * 1.118033988749894;
		const s2: number = xyz * -0.16666666666666666 + ww;
		const xs: number = x + s2;
		const ys: number = y + s2;
		const zs: number = z + s2;
		const ws: number = -0.5 * xyz + ww;

		return this.#noise4DBase(xs, ys, zs, ws);
	}
}